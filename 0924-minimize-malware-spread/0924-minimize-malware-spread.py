class UnionFind:
  def __init__(self, size):
    self._parent = [i for i in range(size)]
    self._count = [1 for _ in range(size)]
  
  def find(self, x):
    if self._parent[x] != x:
      self._parent[x] = self.find(self._parent[x])
    return self._parent[x]
  
  def union(self, x, y):
    root_x = self.find(x)
    root_y = self.find(y)

    if root_x != root_y:
      if self._count[root_x] < self._count[root_y]:
        root_x, root_y = root_y, root_x
      self._parent[root_y] = root_x
      self._count[root_x] += self._count[root_y]

  
  def get_size(self, root):
    return self._count[self.find(root)]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
      size = len(graph)
      adj = [[] for _ in range(size)]
      uf = UnionFind(size)
      for i in range(size):
        for j in range(size):
          if graph[i][j] == 1:
            uf.union(i, j)

      infected_count = {}

      for node in initial:
          root = uf.find(node)
          infected_count[root] = infected_count.get(root, 0) + 1
      
      count = collections.Counter(uf.find(u) for u in initial)
      ans = (-1, min(initial))
      for node in initial:
          root = uf.find(node)
          if count[root] == 1:
              if uf.get_size(root) > ans[0]:
                  ans = uf.get_size(root), node
              elif uf.get_size(root) == ans[0] and node < ans[1]:
                  ans = uf.get_size(root), node

      return ans[1]